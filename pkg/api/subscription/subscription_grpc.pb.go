// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: subscription.proto

package subscription

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubscriptionV1Client is the client API for SubscriptionV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionV1Client interface {
	CreateSubscriptionV1(ctx context.Context, in *CreateSubscriptionRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadSubscriptionV1(ctx context.Context, in *ReadSubscriptionRequestV1, opts ...grpc.CallOption) (*ReadSubscriptionResponseV1, error)
	ChangeSubscriptionV1(ctx context.Context, in *ChangeSubscriptionRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CancelSubscriptionV1(ctx context.Context, in *CancelSubscriptionRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddBalanceV1(ctx context.Context, in *AddBalanceRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadUserDataV1(ctx context.Context, in *ReadUserDataRequestV1, opts ...grpc.CallOption) (*ReadUserDataResponseV1, error)
	ReadBalanceHistoryV1(ctx context.Context, in *ReadBalanceHistoryRequestV1, opts ...grpc.CallOption) (*ReadBalanceHistoryResponseV1, error)
}

type subscriptionV1Client struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionV1Client(cc grpc.ClientConnInterface) SubscriptionV1Client {
	return &subscriptionV1Client{cc}
}

func (c *subscriptionV1Client) CreateSubscriptionV1(ctx context.Context, in *CreateSubscriptionRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.subscription.v1.SubscriptionV1/CreateSubscriptionV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionV1Client) ReadSubscriptionV1(ctx context.Context, in *ReadSubscriptionRequestV1, opts ...grpc.CallOption) (*ReadSubscriptionResponseV1, error) {
	out := new(ReadSubscriptionResponseV1)
	err := c.cc.Invoke(ctx, "/api.subscription.v1.SubscriptionV1/ReadSubscriptionV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionV1Client) ChangeSubscriptionV1(ctx context.Context, in *ChangeSubscriptionRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.subscription.v1.SubscriptionV1/ChangeSubscriptionV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionV1Client) CancelSubscriptionV1(ctx context.Context, in *CancelSubscriptionRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.subscription.v1.SubscriptionV1/CancelSubscriptionV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionV1Client) AddBalanceV1(ctx context.Context, in *AddBalanceRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.subscription.v1.SubscriptionV1/AddBalanceV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionV1Client) ReadUserDataV1(ctx context.Context, in *ReadUserDataRequestV1, opts ...grpc.CallOption) (*ReadUserDataResponseV1, error) {
	out := new(ReadUserDataResponseV1)
	err := c.cc.Invoke(ctx, "/api.subscription.v1.SubscriptionV1/ReadUserDataV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionV1Client) ReadBalanceHistoryV1(ctx context.Context, in *ReadBalanceHistoryRequestV1, opts ...grpc.CallOption) (*ReadBalanceHistoryResponseV1, error) {
	out := new(ReadBalanceHistoryResponseV1)
	err := c.cc.Invoke(ctx, "/api.subscription.v1.SubscriptionV1/ReadBalanceHistoryV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionV1Server is the server API for SubscriptionV1 service.
// All implementations must embed UnimplementedSubscriptionV1Server
// for forward compatibility
type SubscriptionV1Server interface {
	CreateSubscriptionV1(context.Context, *CreateSubscriptionRequestV1) (*emptypb.Empty, error)
	ReadSubscriptionV1(context.Context, *ReadSubscriptionRequestV1) (*ReadSubscriptionResponseV1, error)
	ChangeSubscriptionV1(context.Context, *ChangeSubscriptionRequestV1) (*emptypb.Empty, error)
	CancelSubscriptionV1(context.Context, *CancelSubscriptionRequestV1) (*emptypb.Empty, error)
	AddBalanceV1(context.Context, *AddBalanceRequestV1) (*emptypb.Empty, error)
	ReadUserDataV1(context.Context, *ReadUserDataRequestV1) (*ReadUserDataResponseV1, error)
	ReadBalanceHistoryV1(context.Context, *ReadBalanceHistoryRequestV1) (*ReadBalanceHistoryResponseV1, error)
	mustEmbedUnimplementedSubscriptionV1Server()
}

// UnimplementedSubscriptionV1Server must be embedded to have forward compatible implementations.
type UnimplementedSubscriptionV1Server struct {
}

func (UnimplementedSubscriptionV1Server) CreateSubscriptionV1(context.Context, *CreateSubscriptionRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscriptionV1 not implemented")
}
func (UnimplementedSubscriptionV1Server) ReadSubscriptionV1(context.Context, *ReadSubscriptionRequestV1) (*ReadSubscriptionResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSubscriptionV1 not implemented")
}
func (UnimplementedSubscriptionV1Server) ChangeSubscriptionV1(context.Context, *ChangeSubscriptionRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeSubscriptionV1 not implemented")
}
func (UnimplementedSubscriptionV1Server) CancelSubscriptionV1(context.Context, *CancelSubscriptionRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelSubscriptionV1 not implemented")
}
func (UnimplementedSubscriptionV1Server) AddBalanceV1(context.Context, *AddBalanceRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBalanceV1 not implemented")
}
func (UnimplementedSubscriptionV1Server) ReadUserDataV1(context.Context, *ReadUserDataRequestV1) (*ReadUserDataResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUserDataV1 not implemented")
}
func (UnimplementedSubscriptionV1Server) ReadBalanceHistoryV1(context.Context, *ReadBalanceHistoryRequestV1) (*ReadBalanceHistoryResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadBalanceHistoryV1 not implemented")
}
func (UnimplementedSubscriptionV1Server) mustEmbedUnimplementedSubscriptionV1Server() {}

// UnsafeSubscriptionV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionV1Server will
// result in compilation errors.
type UnsafeSubscriptionV1Server interface {
	mustEmbedUnimplementedSubscriptionV1Server()
}

func RegisterSubscriptionV1Server(s grpc.ServiceRegistrar, srv SubscriptionV1Server) {
	s.RegisterService(&SubscriptionV1_ServiceDesc, srv)
}

func _SubscriptionV1_CreateSubscriptionV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscriptionRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionV1Server).CreateSubscriptionV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.subscription.v1.SubscriptionV1/CreateSubscriptionV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionV1Server).CreateSubscriptionV1(ctx, req.(*CreateSubscriptionRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionV1_ReadSubscriptionV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadSubscriptionRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionV1Server).ReadSubscriptionV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.subscription.v1.SubscriptionV1/ReadSubscriptionV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionV1Server).ReadSubscriptionV1(ctx, req.(*ReadSubscriptionRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionV1_ChangeSubscriptionV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeSubscriptionRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionV1Server).ChangeSubscriptionV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.subscription.v1.SubscriptionV1/ChangeSubscriptionV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionV1Server).ChangeSubscriptionV1(ctx, req.(*ChangeSubscriptionRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionV1_CancelSubscriptionV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelSubscriptionRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionV1Server).CancelSubscriptionV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.subscription.v1.SubscriptionV1/CancelSubscriptionV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionV1Server).CancelSubscriptionV1(ctx, req.(*CancelSubscriptionRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionV1_AddBalanceV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBalanceRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionV1Server).AddBalanceV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.subscription.v1.SubscriptionV1/AddBalanceV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionV1Server).AddBalanceV1(ctx, req.(*AddBalanceRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionV1_ReadUserDataV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadUserDataRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionV1Server).ReadUserDataV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.subscription.v1.SubscriptionV1/ReadUserDataV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionV1Server).ReadUserDataV1(ctx, req.(*ReadUserDataRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionV1_ReadBalanceHistoryV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadBalanceHistoryRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionV1Server).ReadBalanceHistoryV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.subscription.v1.SubscriptionV1/ReadBalanceHistoryV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionV1Server).ReadBalanceHistoryV1(ctx, req.(*ReadBalanceHistoryRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriptionV1_ServiceDesc is the grpc.ServiceDesc for SubscriptionV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.subscription.v1.SubscriptionV1",
	HandlerType: (*SubscriptionV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubscriptionV1",
			Handler:    _SubscriptionV1_CreateSubscriptionV1_Handler,
		},
		{
			MethodName: "ReadSubscriptionV1",
			Handler:    _SubscriptionV1_ReadSubscriptionV1_Handler,
		},
		{
			MethodName: "ChangeSubscriptionV1",
			Handler:    _SubscriptionV1_ChangeSubscriptionV1_Handler,
		},
		{
			MethodName: "CancelSubscriptionV1",
			Handler:    _SubscriptionV1_CancelSubscriptionV1_Handler,
		},
		{
			MethodName: "AddBalanceV1",
			Handler:    _SubscriptionV1_AddBalanceV1_Handler,
		},
		{
			MethodName: "ReadUserDataV1",
			Handler:    _SubscriptionV1_ReadUserDataV1_Handler,
		},
		{
			MethodName: "ReadBalanceHistoryV1",
			Handler:    _SubscriptionV1_ReadBalanceHistoryV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subscription.proto",
}
