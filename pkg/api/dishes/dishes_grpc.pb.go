// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: dishes/dishes.proto

package dishesv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DishesServiceV1_CreateIngredientV1_FullMethodName       = "/api.dishes.v1.DishesServiceV1/CreateIngredientV1"
	DishesServiceV1_UpdateIngredientV1_FullMethodName       = "/api.dishes.v1.DishesServiceV1/UpdateIngredientV1"
	DishesServiceV1_GetIngredientV1_FullMethodName          = "/api.dishes.v1.DishesServiceV1/GetIngredientV1"
	DishesServiceV1_DeleteIngredientV1_FullMethodName       = "/api.dishes.v1.DishesServiceV1/DeleteIngredientV1"
	DishesServiceV1_ListIngredientsV1_FullMethodName        = "/api.dishes.v1.DishesServiceV1/ListIngredientsV1"
	DishesServiceV1_CreateDishV1_FullMethodName             = "/api.dishes.v1.DishesServiceV1/CreateDishV1"
	DishesServiceV1_UpdateDishV1_FullMethodName             = "/api.dishes.v1.DishesServiceV1/UpdateDishV1"
	DishesServiceV1_GetDishV1_FullMethodName                = "/api.dishes.v1.DishesServiceV1/GetDishV1"
	DishesServiceV1_DeleteDishV1_FullMethodName             = "/api.dishes.v1.DishesServiceV1/DeleteDishV1"
	DishesServiceV1_ListDishesV1_FullMethodName             = "/api.dishes.v1.DishesServiceV1/ListDishesV1"
	DishesServiceV1_CreateBundleV1_FullMethodName           = "/api.dishes.v1.DishesServiceV1/CreateBundleV1"
	DishesServiceV1_UpdateBundleV1_FullMethodName           = "/api.dishes.v1.DishesServiceV1/UpdateBundleV1"
	DishesServiceV1_GetBundleV1_FullMethodName              = "/api.dishes.v1.DishesServiceV1/GetBundleV1"
	DishesServiceV1_DeleteBundleV1_FullMethodName           = "/api.dishes.v1.DishesServiceV1/DeleteBundleV1"
	DishesServiceV1_ListBundlesV1_FullMethodName            = "/api.dishes.v1.DishesServiceV1/ListBundlesV1"
	DishesServiceV1_AddBundleWeeklyDishV1_FullMethodName    = "/api.dishes.v1.DishesServiceV1/AddBundleWeeklyDishV1"
	DishesServiceV1_DeleteBundleWeeklyDishV1_FullMethodName = "/api.dishes.v1.DishesServiceV1/DeleteBundleWeeklyDishV1"
	DishesServiceV1_GetBundleWeeklyDishesV1_FullMethodName  = "/api.dishes.v1.DishesServiceV1/GetBundleWeeklyDishesV1"
	DishesServiceV1_CreateResourceV1_FullMethodName         = "/api.dishes.v1.DishesServiceV1/CreateResourceV1"
	DishesServiceV1_UpdateResourceV1_FullMethodName         = "/api.dishes.v1.DishesServiceV1/UpdateResourceV1"
	DishesServiceV1_GetResourceV1_FullMethodName            = "/api.dishes.v1.DishesServiceV1/GetResourceV1"
	DishesServiceV1_DeleteResourceV1_FullMethodName         = "/api.dishes.v1.DishesServiceV1/DeleteResourceV1"
	DishesServiceV1_ListResourcesV1_FullMethodName          = "/api.dishes.v1.DishesServiceV1/ListResourcesV1"
	DishesServiceV1_AttachResourceToDishV1_FullMethodName   = "/api.dishes.v1.DishesServiceV1/AttachResourceToDishV1"
	DishesServiceV1_DetachResourceFromDishV1_FullMethodName = "/api.dishes.v1.DishesServiceV1/DetachResourceFromDishV1"
	DishesServiceV1_ListDishResourcesV1_FullMethodName      = "/api.dishes.v1.DishesServiceV1/ListDishResourcesV1"
)

// DishesServiceV1Client is the client API for DishesServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DishesServiceV1Client interface {
	CreateIngredientV1(ctx context.Context, in *CreateIngredientRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateIngredientV1(ctx context.Context, in *UpdateIngredientRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetIngredientV1(ctx context.Context, in *IngredientIdV1, opts ...grpc.CallOption) (*IngredientV1, error)
	DeleteIngredientV1(ctx context.Context, in *IngredientIdV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListIngredientsV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (DishesServiceV1_ListIngredientsV1Client, error)
	CreateDishV1(ctx context.Context, in *CreateDishRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateDishV1(ctx context.Context, in *UpdateDishRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetDishV1(ctx context.Context, in *DishIdV1, opts ...grpc.CallOption) (*DishV1, error)
	DeleteDishV1(ctx context.Context, in *DishIdV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListDishesV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (DishesServiceV1_ListDishesV1Client, error)
	CreateBundleV1(ctx context.Context, in *CreateBundleRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateBundleV1(ctx context.Context, in *UpdateBundleRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetBundleV1(ctx context.Context, in *BundleIdV1, opts ...grpc.CallOption) (*BundleV1, error)
	DeleteBundleV1(ctx context.Context, in *BundleIdV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListBundlesV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (DishesServiceV1_ListBundlesV1Client, error)
	AddBundleWeeklyDishV1(ctx context.Context, in *BundleWeeklyDishV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteBundleWeeklyDishV1(ctx context.Context, in *BundleWeeklyDishV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetBundleWeeklyDishesV1(ctx context.Context, in *GetBundleWeeklyDishesRequestV1, opts ...grpc.CallOption) (DishesServiceV1_GetBundleWeeklyDishesV1Client, error)
	CreateResourceV1(ctx context.Context, in *CreateResourceRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateResourceV1(ctx context.Context, in *UpdateResourceRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetResourceV1(ctx context.Context, in *ResourceIdV1, opts ...grpc.CallOption) (*ResourceResponseV1, error)
	DeleteResourceV1(ctx context.Context, in *ResourceIdV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListResourcesV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (DishesServiceV1_ListResourcesV1Client, error)
	AttachResourceToDishV1(ctx context.Context, in *DishResourceRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DetachResourceFromDishV1(ctx context.Context, in *DishResourceRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListDishResourcesV1(ctx context.Context, in *DishIdV1, opts ...grpc.CallOption) (DishesServiceV1_ListDishResourcesV1Client, error)
}

type dishesServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewDishesServiceV1Client(cc grpc.ClientConnInterface) DishesServiceV1Client {
	return &dishesServiceV1Client{cc}
}

func (c *dishesServiceV1Client) CreateIngredientV1(ctx context.Context, in *CreateIngredientRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DishesServiceV1_CreateIngredientV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishesServiceV1Client) UpdateIngredientV1(ctx context.Context, in *UpdateIngredientRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DishesServiceV1_UpdateIngredientV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishesServiceV1Client) GetIngredientV1(ctx context.Context, in *IngredientIdV1, opts ...grpc.CallOption) (*IngredientV1, error) {
	out := new(IngredientV1)
	err := c.cc.Invoke(ctx, DishesServiceV1_GetIngredientV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishesServiceV1Client) DeleteIngredientV1(ctx context.Context, in *IngredientIdV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DishesServiceV1_DeleteIngredientV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishesServiceV1Client) ListIngredientsV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (DishesServiceV1_ListIngredientsV1Client, error) {
	stream, err := c.cc.NewStream(ctx, &DishesServiceV1_ServiceDesc.Streams[0], DishesServiceV1_ListIngredientsV1_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &dishesServiceV1ListIngredientsV1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DishesServiceV1_ListIngredientsV1Client interface {
	Recv() (*IngredientV1, error)
	grpc.ClientStream
}

type dishesServiceV1ListIngredientsV1Client struct {
	grpc.ClientStream
}

func (x *dishesServiceV1ListIngredientsV1Client) Recv() (*IngredientV1, error) {
	m := new(IngredientV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dishesServiceV1Client) CreateDishV1(ctx context.Context, in *CreateDishRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DishesServiceV1_CreateDishV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishesServiceV1Client) UpdateDishV1(ctx context.Context, in *UpdateDishRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DishesServiceV1_UpdateDishV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishesServiceV1Client) GetDishV1(ctx context.Context, in *DishIdV1, opts ...grpc.CallOption) (*DishV1, error) {
	out := new(DishV1)
	err := c.cc.Invoke(ctx, DishesServiceV1_GetDishV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishesServiceV1Client) DeleteDishV1(ctx context.Context, in *DishIdV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DishesServiceV1_DeleteDishV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishesServiceV1Client) ListDishesV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (DishesServiceV1_ListDishesV1Client, error) {
	stream, err := c.cc.NewStream(ctx, &DishesServiceV1_ServiceDesc.Streams[1], DishesServiceV1_ListDishesV1_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &dishesServiceV1ListDishesV1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DishesServiceV1_ListDishesV1Client interface {
	Recv() (*DishV1, error)
	grpc.ClientStream
}

type dishesServiceV1ListDishesV1Client struct {
	grpc.ClientStream
}

func (x *dishesServiceV1ListDishesV1Client) Recv() (*DishV1, error) {
	m := new(DishV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dishesServiceV1Client) CreateBundleV1(ctx context.Context, in *CreateBundleRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DishesServiceV1_CreateBundleV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishesServiceV1Client) UpdateBundleV1(ctx context.Context, in *UpdateBundleRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DishesServiceV1_UpdateBundleV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishesServiceV1Client) GetBundleV1(ctx context.Context, in *BundleIdV1, opts ...grpc.CallOption) (*BundleV1, error) {
	out := new(BundleV1)
	err := c.cc.Invoke(ctx, DishesServiceV1_GetBundleV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishesServiceV1Client) DeleteBundleV1(ctx context.Context, in *BundleIdV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DishesServiceV1_DeleteBundleV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishesServiceV1Client) ListBundlesV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (DishesServiceV1_ListBundlesV1Client, error) {
	stream, err := c.cc.NewStream(ctx, &DishesServiceV1_ServiceDesc.Streams[2], DishesServiceV1_ListBundlesV1_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &dishesServiceV1ListBundlesV1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DishesServiceV1_ListBundlesV1Client interface {
	Recv() (*BundleV1, error)
	grpc.ClientStream
}

type dishesServiceV1ListBundlesV1Client struct {
	grpc.ClientStream
}

func (x *dishesServiceV1ListBundlesV1Client) Recv() (*BundleV1, error) {
	m := new(BundleV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dishesServiceV1Client) AddBundleWeeklyDishV1(ctx context.Context, in *BundleWeeklyDishV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DishesServiceV1_AddBundleWeeklyDishV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishesServiceV1Client) DeleteBundleWeeklyDishV1(ctx context.Context, in *BundleWeeklyDishV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DishesServiceV1_DeleteBundleWeeklyDishV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishesServiceV1Client) GetBundleWeeklyDishesV1(ctx context.Context, in *GetBundleWeeklyDishesRequestV1, opts ...grpc.CallOption) (DishesServiceV1_GetBundleWeeklyDishesV1Client, error) {
	stream, err := c.cc.NewStream(ctx, &DishesServiceV1_ServiceDesc.Streams[3], DishesServiceV1_GetBundleWeeklyDishesV1_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &dishesServiceV1GetBundleWeeklyDishesV1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DishesServiceV1_GetBundleWeeklyDishesV1Client interface {
	Recv() (*DishV1, error)
	grpc.ClientStream
}

type dishesServiceV1GetBundleWeeklyDishesV1Client struct {
	grpc.ClientStream
}

func (x *dishesServiceV1GetBundleWeeklyDishesV1Client) Recv() (*DishV1, error) {
	m := new(DishV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dishesServiceV1Client) CreateResourceV1(ctx context.Context, in *CreateResourceRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DishesServiceV1_CreateResourceV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishesServiceV1Client) UpdateResourceV1(ctx context.Context, in *UpdateResourceRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DishesServiceV1_UpdateResourceV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishesServiceV1Client) GetResourceV1(ctx context.Context, in *ResourceIdV1, opts ...grpc.CallOption) (*ResourceResponseV1, error) {
	out := new(ResourceResponseV1)
	err := c.cc.Invoke(ctx, DishesServiceV1_GetResourceV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishesServiceV1Client) DeleteResourceV1(ctx context.Context, in *ResourceIdV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DishesServiceV1_DeleteResourceV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishesServiceV1Client) ListResourcesV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (DishesServiceV1_ListResourcesV1Client, error) {
	stream, err := c.cc.NewStream(ctx, &DishesServiceV1_ServiceDesc.Streams[4], DishesServiceV1_ListResourcesV1_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &dishesServiceV1ListResourcesV1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DishesServiceV1_ListResourcesV1Client interface {
	Recv() (*ResourceResponseV1, error)
	grpc.ClientStream
}

type dishesServiceV1ListResourcesV1Client struct {
	grpc.ClientStream
}

func (x *dishesServiceV1ListResourcesV1Client) Recv() (*ResourceResponseV1, error) {
	m := new(ResourceResponseV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dishesServiceV1Client) AttachResourceToDishV1(ctx context.Context, in *DishResourceRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DishesServiceV1_AttachResourceToDishV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishesServiceV1Client) DetachResourceFromDishV1(ctx context.Context, in *DishResourceRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DishesServiceV1_DetachResourceFromDishV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishesServiceV1Client) ListDishResourcesV1(ctx context.Context, in *DishIdV1, opts ...grpc.CallOption) (DishesServiceV1_ListDishResourcesV1Client, error) {
	stream, err := c.cc.NewStream(ctx, &DishesServiceV1_ServiceDesc.Streams[5], DishesServiceV1_ListDishResourcesV1_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &dishesServiceV1ListDishResourcesV1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DishesServiceV1_ListDishResourcesV1Client interface {
	Recv() (*ResourceResponseV1, error)
	grpc.ClientStream
}

type dishesServiceV1ListDishResourcesV1Client struct {
	grpc.ClientStream
}

func (x *dishesServiceV1ListDishResourcesV1Client) Recv() (*ResourceResponseV1, error) {
	m := new(ResourceResponseV1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DishesServiceV1Server is the server API for DishesServiceV1 service.
// All implementations must embed UnimplementedDishesServiceV1Server
// for forward compatibility
type DishesServiceV1Server interface {
	CreateIngredientV1(context.Context, *CreateIngredientRequestV1) (*emptypb.Empty, error)
	UpdateIngredientV1(context.Context, *UpdateIngredientRequestV1) (*emptypb.Empty, error)
	GetIngredientV1(context.Context, *IngredientIdV1) (*IngredientV1, error)
	DeleteIngredientV1(context.Context, *IngredientIdV1) (*emptypb.Empty, error)
	ListIngredientsV1(*emptypb.Empty, DishesServiceV1_ListIngredientsV1Server) error
	CreateDishV1(context.Context, *CreateDishRequestV1) (*emptypb.Empty, error)
	UpdateDishV1(context.Context, *UpdateDishRequestV1) (*emptypb.Empty, error)
	GetDishV1(context.Context, *DishIdV1) (*DishV1, error)
	DeleteDishV1(context.Context, *DishIdV1) (*emptypb.Empty, error)
	ListDishesV1(*emptypb.Empty, DishesServiceV1_ListDishesV1Server) error
	CreateBundleV1(context.Context, *CreateBundleRequestV1) (*emptypb.Empty, error)
	UpdateBundleV1(context.Context, *UpdateBundleRequestV1) (*emptypb.Empty, error)
	GetBundleV1(context.Context, *BundleIdV1) (*BundleV1, error)
	DeleteBundleV1(context.Context, *BundleIdV1) (*emptypb.Empty, error)
	ListBundlesV1(*emptypb.Empty, DishesServiceV1_ListBundlesV1Server) error
	AddBundleWeeklyDishV1(context.Context, *BundleWeeklyDishV1) (*emptypb.Empty, error)
	DeleteBundleWeeklyDishV1(context.Context, *BundleWeeklyDishV1) (*emptypb.Empty, error)
	GetBundleWeeklyDishesV1(*GetBundleWeeklyDishesRequestV1, DishesServiceV1_GetBundleWeeklyDishesV1Server) error
	CreateResourceV1(context.Context, *CreateResourceRequestV1) (*emptypb.Empty, error)
	UpdateResourceV1(context.Context, *UpdateResourceRequestV1) (*emptypb.Empty, error)
	GetResourceV1(context.Context, *ResourceIdV1) (*ResourceResponseV1, error)
	DeleteResourceV1(context.Context, *ResourceIdV1) (*emptypb.Empty, error)
	ListResourcesV1(*emptypb.Empty, DishesServiceV1_ListResourcesV1Server) error
	AttachResourceToDishV1(context.Context, *DishResourceRequestV1) (*emptypb.Empty, error)
	DetachResourceFromDishV1(context.Context, *DishResourceRequestV1) (*emptypb.Empty, error)
	ListDishResourcesV1(*DishIdV1, DishesServiceV1_ListDishResourcesV1Server) error
	mustEmbedUnimplementedDishesServiceV1Server()
}

// UnimplementedDishesServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedDishesServiceV1Server struct {
}

func (UnimplementedDishesServiceV1Server) CreateIngredientV1(context.Context, *CreateIngredientRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIngredientV1 not implemented")
}
func (UnimplementedDishesServiceV1Server) UpdateIngredientV1(context.Context, *UpdateIngredientRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIngredientV1 not implemented")
}
func (UnimplementedDishesServiceV1Server) GetIngredientV1(context.Context, *IngredientIdV1) (*IngredientV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIngredientV1 not implemented")
}
func (UnimplementedDishesServiceV1Server) DeleteIngredientV1(context.Context, *IngredientIdV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIngredientV1 not implemented")
}
func (UnimplementedDishesServiceV1Server) ListIngredientsV1(*emptypb.Empty, DishesServiceV1_ListIngredientsV1Server) error {
	return status.Errorf(codes.Unimplemented, "method ListIngredientsV1 not implemented")
}
func (UnimplementedDishesServiceV1Server) CreateDishV1(context.Context, *CreateDishRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDishV1 not implemented")
}
func (UnimplementedDishesServiceV1Server) UpdateDishV1(context.Context, *UpdateDishRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDishV1 not implemented")
}
func (UnimplementedDishesServiceV1Server) GetDishV1(context.Context, *DishIdV1) (*DishV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDishV1 not implemented")
}
func (UnimplementedDishesServiceV1Server) DeleteDishV1(context.Context, *DishIdV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDishV1 not implemented")
}
func (UnimplementedDishesServiceV1Server) ListDishesV1(*emptypb.Empty, DishesServiceV1_ListDishesV1Server) error {
	return status.Errorf(codes.Unimplemented, "method ListDishesV1 not implemented")
}
func (UnimplementedDishesServiceV1Server) CreateBundleV1(context.Context, *CreateBundleRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBundleV1 not implemented")
}
func (UnimplementedDishesServiceV1Server) UpdateBundleV1(context.Context, *UpdateBundleRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBundleV1 not implemented")
}
func (UnimplementedDishesServiceV1Server) GetBundleV1(context.Context, *BundleIdV1) (*BundleV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBundleV1 not implemented")
}
func (UnimplementedDishesServiceV1Server) DeleteBundleV1(context.Context, *BundleIdV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBundleV1 not implemented")
}
func (UnimplementedDishesServiceV1Server) ListBundlesV1(*emptypb.Empty, DishesServiceV1_ListBundlesV1Server) error {
	return status.Errorf(codes.Unimplemented, "method ListBundlesV1 not implemented")
}
func (UnimplementedDishesServiceV1Server) AddBundleWeeklyDishV1(context.Context, *BundleWeeklyDishV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBundleWeeklyDishV1 not implemented")
}
func (UnimplementedDishesServiceV1Server) DeleteBundleWeeklyDishV1(context.Context, *BundleWeeklyDishV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBundleWeeklyDishV1 not implemented")
}
func (UnimplementedDishesServiceV1Server) GetBundleWeeklyDishesV1(*GetBundleWeeklyDishesRequestV1, DishesServiceV1_GetBundleWeeklyDishesV1Server) error {
	return status.Errorf(codes.Unimplemented, "method GetBundleWeeklyDishesV1 not implemented")
}
func (UnimplementedDishesServiceV1Server) CreateResourceV1(context.Context, *CreateResourceRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResourceV1 not implemented")
}
func (UnimplementedDishesServiceV1Server) UpdateResourceV1(context.Context, *UpdateResourceRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResourceV1 not implemented")
}
func (UnimplementedDishesServiceV1Server) GetResourceV1(context.Context, *ResourceIdV1) (*ResourceResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceV1 not implemented")
}
func (UnimplementedDishesServiceV1Server) DeleteResourceV1(context.Context, *ResourceIdV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResourceV1 not implemented")
}
func (UnimplementedDishesServiceV1Server) ListResourcesV1(*emptypb.Empty, DishesServiceV1_ListResourcesV1Server) error {
	return status.Errorf(codes.Unimplemented, "method ListResourcesV1 not implemented")
}
func (UnimplementedDishesServiceV1Server) AttachResourceToDishV1(context.Context, *DishResourceRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachResourceToDishV1 not implemented")
}
func (UnimplementedDishesServiceV1Server) DetachResourceFromDishV1(context.Context, *DishResourceRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachResourceFromDishV1 not implemented")
}
func (UnimplementedDishesServiceV1Server) ListDishResourcesV1(*DishIdV1, DishesServiceV1_ListDishResourcesV1Server) error {
	return status.Errorf(codes.Unimplemented, "method ListDishResourcesV1 not implemented")
}
func (UnimplementedDishesServiceV1Server) mustEmbedUnimplementedDishesServiceV1Server() {}

// UnsafeDishesServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DishesServiceV1Server will
// result in compilation errors.
type UnsafeDishesServiceV1Server interface {
	mustEmbedUnimplementedDishesServiceV1Server()
}

func RegisterDishesServiceV1Server(s grpc.ServiceRegistrar, srv DishesServiceV1Server) {
	s.RegisterService(&DishesServiceV1_ServiceDesc, srv)
}

func _DishesServiceV1_CreateIngredientV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIngredientRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishesServiceV1Server).CreateIngredientV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishesServiceV1_CreateIngredientV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishesServiceV1Server).CreateIngredientV1(ctx, req.(*CreateIngredientRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishesServiceV1_UpdateIngredientV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIngredientRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishesServiceV1Server).UpdateIngredientV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishesServiceV1_UpdateIngredientV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishesServiceV1Server).UpdateIngredientV1(ctx, req.(*UpdateIngredientRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishesServiceV1_GetIngredientV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngredientIdV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishesServiceV1Server).GetIngredientV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishesServiceV1_GetIngredientV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishesServiceV1Server).GetIngredientV1(ctx, req.(*IngredientIdV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishesServiceV1_DeleteIngredientV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngredientIdV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishesServiceV1Server).DeleteIngredientV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishesServiceV1_DeleteIngredientV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishesServiceV1Server).DeleteIngredientV1(ctx, req.(*IngredientIdV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishesServiceV1_ListIngredientsV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DishesServiceV1Server).ListIngredientsV1(m, &dishesServiceV1ListIngredientsV1Server{stream})
}

type DishesServiceV1_ListIngredientsV1Server interface {
	Send(*IngredientV1) error
	grpc.ServerStream
}

type dishesServiceV1ListIngredientsV1Server struct {
	grpc.ServerStream
}

func (x *dishesServiceV1ListIngredientsV1Server) Send(m *IngredientV1) error {
	return x.ServerStream.SendMsg(m)
}

func _DishesServiceV1_CreateDishV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDishRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishesServiceV1Server).CreateDishV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishesServiceV1_CreateDishV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishesServiceV1Server).CreateDishV1(ctx, req.(*CreateDishRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishesServiceV1_UpdateDishV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDishRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishesServiceV1Server).UpdateDishV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishesServiceV1_UpdateDishV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishesServiceV1Server).UpdateDishV1(ctx, req.(*UpdateDishRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishesServiceV1_GetDishV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DishIdV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishesServiceV1Server).GetDishV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishesServiceV1_GetDishV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishesServiceV1Server).GetDishV1(ctx, req.(*DishIdV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishesServiceV1_DeleteDishV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DishIdV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishesServiceV1Server).DeleteDishV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishesServiceV1_DeleteDishV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishesServiceV1Server).DeleteDishV1(ctx, req.(*DishIdV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishesServiceV1_ListDishesV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DishesServiceV1Server).ListDishesV1(m, &dishesServiceV1ListDishesV1Server{stream})
}

type DishesServiceV1_ListDishesV1Server interface {
	Send(*DishV1) error
	grpc.ServerStream
}

type dishesServiceV1ListDishesV1Server struct {
	grpc.ServerStream
}

func (x *dishesServiceV1ListDishesV1Server) Send(m *DishV1) error {
	return x.ServerStream.SendMsg(m)
}

func _DishesServiceV1_CreateBundleV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBundleRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishesServiceV1Server).CreateBundleV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishesServiceV1_CreateBundleV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishesServiceV1Server).CreateBundleV1(ctx, req.(*CreateBundleRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishesServiceV1_UpdateBundleV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBundleRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishesServiceV1Server).UpdateBundleV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishesServiceV1_UpdateBundleV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishesServiceV1Server).UpdateBundleV1(ctx, req.(*UpdateBundleRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishesServiceV1_GetBundleV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BundleIdV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishesServiceV1Server).GetBundleV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishesServiceV1_GetBundleV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishesServiceV1Server).GetBundleV1(ctx, req.(*BundleIdV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishesServiceV1_DeleteBundleV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BundleIdV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishesServiceV1Server).DeleteBundleV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishesServiceV1_DeleteBundleV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishesServiceV1Server).DeleteBundleV1(ctx, req.(*BundleIdV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishesServiceV1_ListBundlesV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DishesServiceV1Server).ListBundlesV1(m, &dishesServiceV1ListBundlesV1Server{stream})
}

type DishesServiceV1_ListBundlesV1Server interface {
	Send(*BundleV1) error
	grpc.ServerStream
}

type dishesServiceV1ListBundlesV1Server struct {
	grpc.ServerStream
}

func (x *dishesServiceV1ListBundlesV1Server) Send(m *BundleV1) error {
	return x.ServerStream.SendMsg(m)
}

func _DishesServiceV1_AddBundleWeeklyDishV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BundleWeeklyDishV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishesServiceV1Server).AddBundleWeeklyDishV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishesServiceV1_AddBundleWeeklyDishV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishesServiceV1Server).AddBundleWeeklyDishV1(ctx, req.(*BundleWeeklyDishV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishesServiceV1_DeleteBundleWeeklyDishV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BundleWeeklyDishV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishesServiceV1Server).DeleteBundleWeeklyDishV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishesServiceV1_DeleteBundleWeeklyDishV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishesServiceV1Server).DeleteBundleWeeklyDishV1(ctx, req.(*BundleWeeklyDishV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishesServiceV1_GetBundleWeeklyDishesV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBundleWeeklyDishesRequestV1)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DishesServiceV1Server).GetBundleWeeklyDishesV1(m, &dishesServiceV1GetBundleWeeklyDishesV1Server{stream})
}

type DishesServiceV1_GetBundleWeeklyDishesV1Server interface {
	Send(*DishV1) error
	grpc.ServerStream
}

type dishesServiceV1GetBundleWeeklyDishesV1Server struct {
	grpc.ServerStream
}

func (x *dishesServiceV1GetBundleWeeklyDishesV1Server) Send(m *DishV1) error {
	return x.ServerStream.SendMsg(m)
}

func _DishesServiceV1_CreateResourceV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishesServiceV1Server).CreateResourceV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishesServiceV1_CreateResourceV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishesServiceV1Server).CreateResourceV1(ctx, req.(*CreateResourceRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishesServiceV1_UpdateResourceV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishesServiceV1Server).UpdateResourceV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishesServiceV1_UpdateResourceV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishesServiceV1Server).UpdateResourceV1(ctx, req.(*UpdateResourceRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishesServiceV1_GetResourceV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceIdV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishesServiceV1Server).GetResourceV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishesServiceV1_GetResourceV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishesServiceV1Server).GetResourceV1(ctx, req.(*ResourceIdV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishesServiceV1_DeleteResourceV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceIdV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishesServiceV1Server).DeleteResourceV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishesServiceV1_DeleteResourceV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishesServiceV1Server).DeleteResourceV1(ctx, req.(*ResourceIdV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishesServiceV1_ListResourcesV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DishesServiceV1Server).ListResourcesV1(m, &dishesServiceV1ListResourcesV1Server{stream})
}

type DishesServiceV1_ListResourcesV1Server interface {
	Send(*ResourceResponseV1) error
	grpc.ServerStream
}

type dishesServiceV1ListResourcesV1Server struct {
	grpc.ServerStream
}

func (x *dishesServiceV1ListResourcesV1Server) Send(m *ResourceResponseV1) error {
	return x.ServerStream.SendMsg(m)
}

func _DishesServiceV1_AttachResourceToDishV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DishResourceRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishesServiceV1Server).AttachResourceToDishV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishesServiceV1_AttachResourceToDishV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishesServiceV1Server).AttachResourceToDishV1(ctx, req.(*DishResourceRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishesServiceV1_DetachResourceFromDishV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DishResourceRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishesServiceV1Server).DetachResourceFromDishV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DishesServiceV1_DetachResourceFromDishV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishesServiceV1Server).DetachResourceFromDishV1(ctx, req.(*DishResourceRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishesServiceV1_ListDishResourcesV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DishIdV1)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DishesServiceV1Server).ListDishResourcesV1(m, &dishesServiceV1ListDishResourcesV1Server{stream})
}

type DishesServiceV1_ListDishResourcesV1Server interface {
	Send(*ResourceResponseV1) error
	grpc.ServerStream
}

type dishesServiceV1ListDishResourcesV1Server struct {
	grpc.ServerStream
}

func (x *dishesServiceV1ListDishResourcesV1Server) Send(m *ResourceResponseV1) error {
	return x.ServerStream.SendMsg(m)
}

// DishesServiceV1_ServiceDesc is the grpc.ServiceDesc for DishesServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DishesServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.dishes.v1.DishesServiceV1",
	HandlerType: (*DishesServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIngredientV1",
			Handler:    _DishesServiceV1_CreateIngredientV1_Handler,
		},
		{
			MethodName: "UpdateIngredientV1",
			Handler:    _DishesServiceV1_UpdateIngredientV1_Handler,
		},
		{
			MethodName: "GetIngredientV1",
			Handler:    _DishesServiceV1_GetIngredientV1_Handler,
		},
		{
			MethodName: "DeleteIngredientV1",
			Handler:    _DishesServiceV1_DeleteIngredientV1_Handler,
		},
		{
			MethodName: "CreateDishV1",
			Handler:    _DishesServiceV1_CreateDishV1_Handler,
		},
		{
			MethodName: "UpdateDishV1",
			Handler:    _DishesServiceV1_UpdateDishV1_Handler,
		},
		{
			MethodName: "GetDishV1",
			Handler:    _DishesServiceV1_GetDishV1_Handler,
		},
		{
			MethodName: "DeleteDishV1",
			Handler:    _DishesServiceV1_DeleteDishV1_Handler,
		},
		{
			MethodName: "CreateBundleV1",
			Handler:    _DishesServiceV1_CreateBundleV1_Handler,
		},
		{
			MethodName: "UpdateBundleV1",
			Handler:    _DishesServiceV1_UpdateBundleV1_Handler,
		},
		{
			MethodName: "GetBundleV1",
			Handler:    _DishesServiceV1_GetBundleV1_Handler,
		},
		{
			MethodName: "DeleteBundleV1",
			Handler:    _DishesServiceV1_DeleteBundleV1_Handler,
		},
		{
			MethodName: "AddBundleWeeklyDishV1",
			Handler:    _DishesServiceV1_AddBundleWeeklyDishV1_Handler,
		},
		{
			MethodName: "DeleteBundleWeeklyDishV1",
			Handler:    _DishesServiceV1_DeleteBundleWeeklyDishV1_Handler,
		},
		{
			MethodName: "CreateResourceV1",
			Handler:    _DishesServiceV1_CreateResourceV1_Handler,
		},
		{
			MethodName: "UpdateResourceV1",
			Handler:    _DishesServiceV1_UpdateResourceV1_Handler,
		},
		{
			MethodName: "GetResourceV1",
			Handler:    _DishesServiceV1_GetResourceV1_Handler,
		},
		{
			MethodName: "DeleteResourceV1",
			Handler:    _DishesServiceV1_DeleteResourceV1_Handler,
		},
		{
			MethodName: "AttachResourceToDishV1",
			Handler:    _DishesServiceV1_AttachResourceToDishV1_Handler,
		},
		{
			MethodName: "DetachResourceFromDishV1",
			Handler:    _DishesServiceV1_DetachResourceFromDishV1_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListIngredientsV1",
			Handler:       _DishesServiceV1_ListIngredientsV1_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListDishesV1",
			Handler:       _DishesServiceV1_ListDishesV1_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListBundlesV1",
			Handler:       _DishesServiceV1_ListBundlesV1_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetBundleWeeklyDishesV1",
			Handler:       _DishesServiceV1_GetBundleWeeklyDishesV1_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListResourcesV1",
			Handler:       _DishesServiceV1_ListResourcesV1_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListDishResourcesV1",
			Handler:       _DishesServiceV1_ListDishResourcesV1_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dishes/dishes.proto",
}
