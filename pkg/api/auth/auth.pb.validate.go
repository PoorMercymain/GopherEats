// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: auth.proto

package auth

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RegisterRequestV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RegisterRequestV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterRequestV1MultiError, or nil if none found.
func (m *RegisterRequestV1) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterRequestV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		err := RegisterRequestV1ValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := RegisterRequestV1ValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAddress()) < 1 {
		err := RegisterRequestV1ValidationError{
			field:  "Address",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterRequestV1MultiError(errors)
	}

	return nil
}

// RegisterRequestV1MultiError is an error wrapping multiple validation errors
// returned by RegisterRequestV1.ValidateAll() if the designated constraints
// aren't met.
type RegisterRequestV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterRequestV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterRequestV1MultiError) AllErrors() []error { return m }

// RegisterRequestV1ValidationError is the validation error returned by
// RegisterRequestV1.Validate if the designated constraints aren't met.
type RegisterRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterRequestV1ValidationError) ErrorName() string {
	return "RegisterRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterRequestV1ValidationError{}

// Validate checks the field values on RegisterResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterResponseV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterResponseV1MultiError, or nil if none found.
func (m *RegisterResponseV1) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterResponseV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOtpSecretKey()) < 1 {
		err := RegisterResponseV1ValidationError{
			field:  "OtpSecretKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegisterResponseV1MultiError(errors)
	}

	return nil
}

// RegisterResponseV1MultiError is an error wrapping multiple validation errors
// returned by RegisterResponseV1.ValidateAll() if the designated constraints
// aren't met.
type RegisterResponseV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterResponseV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterResponseV1MultiError) AllErrors() []error { return m }

// RegisterResponseV1ValidationError is the validation error returned by
// RegisterResponseV1.Validate if the designated constraints aren't met.
type RegisterResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterResponseV1ValidationError) ErrorName() string {
	return "RegisterResponseV1ValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterResponseV1ValidationError{}

// Validate checks the field values on LoginRequestV1 with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequestV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequestV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestV1MultiError,
// or nil if none found.
func (m *LoginRequestV1) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequestV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		err := LoginRequestV1ValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := LoginRequestV1ValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginRequestV1MultiError(errors)
	}

	return nil
}

// LoginRequestV1MultiError is an error wrapping multiple validation errors
// returned by LoginRequestV1.ValidateAll() if the designated constraints
// aren't met.
type LoginRequestV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestV1MultiError) AllErrors() []error { return m }

// LoginRequestV1ValidationError is the validation error returned by
// LoginRequestV1.Validate if the designated constraints aren't met.
type LoginRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestV1ValidationError) ErrorName() string { return "LoginRequestV1ValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestV1ValidationError{}

// Validate checks the field values on LoginResponseV1 with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LoginResponseV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginResponseV1MultiError, or nil if none found.
func (m *LoginResponseV1) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponseV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 3 {
		err := LoginResponseV1ValidationError{
			field:  "Token",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginResponseV1MultiError(errors)
	}

	return nil
}

// LoginResponseV1MultiError is an error wrapping multiple validation errors
// returned by LoginResponseV1.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseV1MultiError) AllErrors() []error { return m }

// LoginResponseV1ValidationError is the validation error returned by
// LoginResponseV1.Validate if the designated constraints aren't met.
type LoginResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseV1ValidationError) ErrorName() string { return "LoginResponseV1ValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseV1ValidationError{}

// Validate checks the field values on ChangePasswordRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePasswordRequestV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePasswordRequestV1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePasswordRequestV1MultiError, or nil if none found.
func (m *ChangePasswordRequestV1) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePasswordRequestV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		err := ChangePasswordRequestV1ValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOldPassword()) < 1 {
		err := ChangePasswordRequestV1ValidationError{
			field:  "OldPassword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNewPassword()) < 1 {
		err := ChangePasswordRequestV1ValidationError{
			field:  "NewPassword",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChangePasswordRequestV1MultiError(errors)
	}

	return nil
}

// ChangePasswordRequestV1MultiError is an error wrapping multiple validation
// errors returned by ChangePasswordRequestV1.ValidateAll() if the designated
// constraints aren't met.
type ChangePasswordRequestV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePasswordRequestV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePasswordRequestV1MultiError) AllErrors() []error { return m }

// ChangePasswordRequestV1ValidationError is the validation error returned by
// ChangePasswordRequestV1.Validate if the designated constraints aren't met.
type ChangePasswordRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePasswordRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePasswordRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePasswordRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePasswordRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePasswordRequestV1ValidationError) ErrorName() string {
	return "ChangePasswordRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePasswordRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePasswordRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePasswordRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePasswordRequestV1ValidationError{}

// Validate checks the field values on LoginWithOTPRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LoginWithOTPRequestV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginWithOTPRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LoginWithOTPRequestV1MultiError, or nil if none found.
func (m *LoginWithOTPRequestV1) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginWithOTPRequestV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		err := LoginWithOTPRequestV1ValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOtpCode()) != 6 {
		err := LoginWithOTPRequestV1ValidationError{
			field:  "OtpCode",
			reason: "value length must be 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return LoginWithOTPRequestV1MultiError(errors)
	}

	return nil
}

// LoginWithOTPRequestV1MultiError is an error wrapping multiple validation
// errors returned by LoginWithOTPRequestV1.ValidateAll() if the designated
// constraints aren't met.
type LoginWithOTPRequestV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginWithOTPRequestV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginWithOTPRequestV1MultiError) AllErrors() []error { return m }

// LoginWithOTPRequestV1ValidationError is the validation error returned by
// LoginWithOTPRequestV1.Validate if the designated constraints aren't met.
type LoginWithOTPRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginWithOTPRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginWithOTPRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginWithOTPRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginWithOTPRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginWithOTPRequestV1ValidationError) ErrorName() string {
	return "LoginWithOTPRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e LoginWithOTPRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginWithOTPRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginWithOTPRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginWithOTPRequestV1ValidationError{}

// Validate checks the field values on ChangeAddressRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeAddressRequestV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeAddressRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeAddressRequestV1MultiError, or nil if none found.
func (m *ChangeAddressRequestV1) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeAddressRequestV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		err := ChangeAddressRequestV1ValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 1 {
		err := ChangeAddressRequestV1ValidationError{
			field:  "Password",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNewAddress()) < 1 {
		err := ChangeAddressRequestV1ValidationError{
			field:  "NewAddress",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChangeAddressRequestV1MultiError(errors)
	}

	return nil
}

// ChangeAddressRequestV1MultiError is an error wrapping multiple validation
// errors returned by ChangeAddressRequestV1.ValidateAll() if the designated
// constraints aren't met.
type ChangeAddressRequestV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeAddressRequestV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeAddressRequestV1MultiError) AllErrors() []error { return m }

// ChangeAddressRequestV1ValidationError is the validation error returned by
// ChangeAddressRequestV1.Validate if the designated constraints aren't met.
type ChangeAddressRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeAddressRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeAddressRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeAddressRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeAddressRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeAddressRequestV1ValidationError) ErrorName() string {
	return "ChangeAddressRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeAddressRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeAddressRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeAddressRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeAddressRequestV1ValidationError{}

// Validate checks the field values on CheckIfUserIsAdminRequestV1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckIfUserIsAdminRequestV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckIfUserIsAdminRequestV1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckIfUserIsAdminRequestV1MultiError, or nil if none found.
func (m *CheckIfUserIsAdminRequestV1) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckIfUserIsAdminRequestV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		err := CheckIfUserIsAdminRequestV1ValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CheckIfUserIsAdminRequestV1MultiError(errors)
	}

	return nil
}

// CheckIfUserIsAdminRequestV1MultiError is an error wrapping multiple
// validation errors returned by CheckIfUserIsAdminRequestV1.ValidateAll() if
// the designated constraints aren't met.
type CheckIfUserIsAdminRequestV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckIfUserIsAdminRequestV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckIfUserIsAdminRequestV1MultiError) AllErrors() []error { return m }

// CheckIfUserIsAdminRequestV1ValidationError is the validation error returned
// by CheckIfUserIsAdminRequestV1.Validate if the designated constraints
// aren't met.
type CheckIfUserIsAdminRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckIfUserIsAdminRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckIfUserIsAdminRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckIfUserIsAdminRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckIfUserIsAdminRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckIfUserIsAdminRequestV1ValidationError) ErrorName() string {
	return "CheckIfUserIsAdminRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e CheckIfUserIsAdminRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckIfUserIsAdminRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckIfUserIsAdminRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckIfUserIsAdminRequestV1ValidationError{}

// Validate checks the field values on CheckIfUserIsAdminResponseV1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckIfUserIsAdminResponseV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckIfUserIsAdminResponseV1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckIfUserIsAdminResponseV1MultiError, or nil if none found.
func (m *CheckIfUserIsAdminResponseV1) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckIfUserIsAdminResponseV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAdmin

	if len(errors) > 0 {
		return CheckIfUserIsAdminResponseV1MultiError(errors)
	}

	return nil
}

// CheckIfUserIsAdminResponseV1MultiError is an error wrapping multiple
// validation errors returned by CheckIfUserIsAdminResponseV1.ValidateAll() if
// the designated constraints aren't met.
type CheckIfUserIsAdminResponseV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckIfUserIsAdminResponseV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckIfUserIsAdminResponseV1MultiError) AllErrors() []error { return m }

// CheckIfUserIsAdminResponseV1ValidationError is the validation error returned
// by CheckIfUserIsAdminResponseV1.Validate if the designated constraints
// aren't met.
type CheckIfUserIsAdminResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckIfUserIsAdminResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckIfUserIsAdminResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckIfUserIsAdminResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckIfUserIsAdminResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckIfUserIsAdminResponseV1ValidationError) ErrorName() string {
	return "CheckIfUserIsAdminResponseV1ValidationError"
}

// Error satisfies the builtin error interface
func (e CheckIfUserIsAdminResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckIfUserIsAdminResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckIfUserIsAdminResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckIfUserIsAdminResponseV1ValidationError{}

// Validate checks the field values on GetEmailFromTokenInMetadataResponseV1
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetEmailFromTokenInMetadataResponseV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEmailFromTokenInMetadataResponseV1
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetEmailFromTokenInMetadataResponseV1MultiError, or nil if none found.
func (m *GetEmailFromTokenInMetadataResponseV1) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEmailFromTokenInMetadataResponseV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return GetEmailFromTokenInMetadataResponseV1MultiError(errors)
	}

	return nil
}

// GetEmailFromTokenInMetadataResponseV1MultiError is an error wrapping
// multiple validation errors returned by
// GetEmailFromTokenInMetadataResponseV1.ValidateAll() if the designated
// constraints aren't met.
type GetEmailFromTokenInMetadataResponseV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEmailFromTokenInMetadataResponseV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEmailFromTokenInMetadataResponseV1MultiError) AllErrors() []error { return m }

// GetEmailFromTokenInMetadataResponseV1ValidationError is the validation error
// returned by GetEmailFromTokenInMetadataResponseV1.Validate if the
// designated constraints aren't met.
type GetEmailFromTokenInMetadataResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEmailFromTokenInMetadataResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEmailFromTokenInMetadataResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEmailFromTokenInMetadataResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEmailFromTokenInMetadataResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEmailFromTokenInMetadataResponseV1ValidationError) ErrorName() string {
	return "GetEmailFromTokenInMetadataResponseV1ValidationError"
}

// Error satisfies the builtin error interface
func (e GetEmailFromTokenInMetadataResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEmailFromTokenInMetadataResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEmailFromTokenInMetadataResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEmailFromTokenInMetadataResponseV1ValidationError{}

// Validate checks the field values on GetAddressRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAddressRequestV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAddressRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAddressRequestV1MultiError, or nil if none found.
func (m *GetAddressRequestV1) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAddressRequestV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return GetAddressRequestV1MultiError(errors)
	}

	return nil
}

// GetAddressRequestV1MultiError is an error wrapping multiple validation
// errors returned by GetAddressRequestV1.ValidateAll() if the designated
// constraints aren't met.
type GetAddressRequestV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAddressRequestV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAddressRequestV1MultiError) AllErrors() []error { return m }

// GetAddressRequestV1ValidationError is the validation error returned by
// GetAddressRequestV1.Validate if the designated constraints aren't met.
type GetAddressRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAddressRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAddressRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAddressRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAddressRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAddressRequestV1ValidationError) ErrorName() string {
	return "GetAddressRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e GetAddressRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAddressRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAddressRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAddressRequestV1ValidationError{}

// Validate checks the field values on GetAddressResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAddressResponseV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAddressResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAddressResponseV1MultiError, or nil if none found.
func (m *GetAddressResponseV1) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAddressResponseV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	if len(errors) > 0 {
		return GetAddressResponseV1MultiError(errors)
	}

	return nil
}

// GetAddressResponseV1MultiError is an error wrapping multiple validation
// errors returned by GetAddressResponseV1.ValidateAll() if the designated
// constraints aren't met.
type GetAddressResponseV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAddressResponseV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAddressResponseV1MultiError) AllErrors() []error { return m }

// GetAddressResponseV1ValidationError is the validation error returned by
// GetAddressResponseV1.Validate if the designated constraints aren't met.
type GetAddressResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAddressResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAddressResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAddressResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAddressResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAddressResponseV1ValidationError) ErrorName() string {
	return "GetAddressResponseV1ValidationError"
}

// Error satisfies the builtin error interface
func (e GetAddressResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAddressResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAddressResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAddressResponseV1ValidationError{}
