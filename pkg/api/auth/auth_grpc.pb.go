// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: auth.proto

package auth

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthV1Client is the client API for AuthV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthV1Client interface {
	// Register can be used to register a user in GopherEats and get secret key to use in some OTP app
	RegisterV1(ctx context.Context, in *RegisterRequestV1, opts ...grpc.CallOption) (*RegisterResponseV1, error)
	// Login can be used to log in using password
	LoginV1(ctx context.Context, in *LoginRequestV1, opts ...grpc.CallOption) (*LoginResponseV1, error)
	// ChangePassword can be used to change password using email and old password
	ChangePasswordV1(ctx context.Context, in *ChangePasswordRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// LoginWithOTP can be used to log in using one-time password
	LoginWithOTPV1(ctx context.Context, in *LoginWithOTPRequestV1, opts ...grpc.CallOption) (*LoginResponseV1, error)
	// ChangeAddress can be used to change user address using email and password
	ChangeAddressV1(ctx context.Context, in *ChangeAddressRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CheckTokenInMetadata can be used to validate JWT in metadata
	CheckTokenInMetadataV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CheckIfUserIsAdmin can be used to check if the user is admin
	CheckIfUserIsAdminV1(ctx context.Context, in *CheckIfUserIsAdminRequestV1, opts ...grpc.CallOption) (*CheckIfUserIsAdminResponseV1, error)
	// GetEmailFromTokenInMetadata can be used to validate JWT in metadata and get email from it
	GetEmailFromTokenInMetadataV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetEmailFromTokenInMetadataResponseV1, error)
	// GetAddressV1 can be used to get addres of a specific user
	GetAddressV1(ctx context.Context, in *GetAddressRequestV1, opts ...grpc.CallOption) (*GetAddressResponseV1, error)
}

type authV1Client struct {
	cc grpc.ClientConnInterface
}

func NewAuthV1Client(cc grpc.ClientConnInterface) AuthV1Client {
	return &authV1Client{cc}
}

func (c *authV1Client) RegisterV1(ctx context.Context, in *RegisterRequestV1, opts ...grpc.CallOption) (*RegisterResponseV1, error) {
	out := new(RegisterResponseV1)
	err := c.cc.Invoke(ctx, "/api.auth.v1.AuthV1/RegisterV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) LoginV1(ctx context.Context, in *LoginRequestV1, opts ...grpc.CallOption) (*LoginResponseV1, error) {
	out := new(LoginResponseV1)
	err := c.cc.Invoke(ctx, "/api.auth.v1.AuthV1/LoginV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) ChangePasswordV1(ctx context.Context, in *ChangePasswordRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.auth.v1.AuthV1/ChangePasswordV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) LoginWithOTPV1(ctx context.Context, in *LoginWithOTPRequestV1, opts ...grpc.CallOption) (*LoginResponseV1, error) {
	out := new(LoginResponseV1)
	err := c.cc.Invoke(ctx, "/api.auth.v1.AuthV1/LoginWithOTPV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) ChangeAddressV1(ctx context.Context, in *ChangeAddressRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.auth.v1.AuthV1/ChangeAddressV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) CheckTokenInMetadataV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.auth.v1.AuthV1/CheckTokenInMetadataV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) CheckIfUserIsAdminV1(ctx context.Context, in *CheckIfUserIsAdminRequestV1, opts ...grpc.CallOption) (*CheckIfUserIsAdminResponseV1, error) {
	out := new(CheckIfUserIsAdminResponseV1)
	err := c.cc.Invoke(ctx, "/api.auth.v1.AuthV1/CheckIfUserIsAdminV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) GetEmailFromTokenInMetadataV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetEmailFromTokenInMetadataResponseV1, error) {
	out := new(GetEmailFromTokenInMetadataResponseV1)
	err := c.cc.Invoke(ctx, "/api.auth.v1.AuthV1/GetEmailFromTokenInMetadataV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authV1Client) GetAddressV1(ctx context.Context, in *GetAddressRequestV1, opts ...grpc.CallOption) (*GetAddressResponseV1, error) {
	out := new(GetAddressResponseV1)
	err := c.cc.Invoke(ctx, "/api.auth.v1.AuthV1/GetAddressV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthV1Server is the server API for AuthV1 service.
// All implementations must embed UnimplementedAuthV1Server
// for forward compatibility
type AuthV1Server interface {
	// Register can be used to register a user in GopherEats and get secret key to use in some OTP app
	RegisterV1(context.Context, *RegisterRequestV1) (*RegisterResponseV1, error)
	// Login can be used to log in using password
	LoginV1(context.Context, *LoginRequestV1) (*LoginResponseV1, error)
	// ChangePassword can be used to change password using email and old password
	ChangePasswordV1(context.Context, *ChangePasswordRequestV1) (*emptypb.Empty, error)
	// LoginWithOTP can be used to log in using one-time password
	LoginWithOTPV1(context.Context, *LoginWithOTPRequestV1) (*LoginResponseV1, error)
	// ChangeAddress can be used to change user address using email and password
	ChangeAddressV1(context.Context, *ChangeAddressRequestV1) (*emptypb.Empty, error)
	// CheckTokenInMetadata can be used to validate JWT in metadata
	CheckTokenInMetadataV1(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// CheckIfUserIsAdmin can be used to check if the user is admin
	CheckIfUserIsAdminV1(context.Context, *CheckIfUserIsAdminRequestV1) (*CheckIfUserIsAdminResponseV1, error)
	// GetEmailFromTokenInMetadata can be used to validate JWT in metadata and get email from it
	GetEmailFromTokenInMetadataV1(context.Context, *emptypb.Empty) (*GetEmailFromTokenInMetadataResponseV1, error)
	// GetAddressV1 can be used to get addres of a specific user
	GetAddressV1(context.Context, *GetAddressRequestV1) (*GetAddressResponseV1, error)
	mustEmbedUnimplementedAuthV1Server()
}

// UnimplementedAuthV1Server must be embedded to have forward compatible implementations.
type UnimplementedAuthV1Server struct {
}

func (UnimplementedAuthV1Server) RegisterV1(context.Context, *RegisterRequestV1) (*RegisterResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterV1 not implemented")
}
func (UnimplementedAuthV1Server) LoginV1(context.Context, *LoginRequestV1) (*LoginResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginV1 not implemented")
}
func (UnimplementedAuthV1Server) ChangePasswordV1(context.Context, *ChangePasswordRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePasswordV1 not implemented")
}
func (UnimplementedAuthV1Server) LoginWithOTPV1(context.Context, *LoginWithOTPRequestV1) (*LoginResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWithOTPV1 not implemented")
}
func (UnimplementedAuthV1Server) ChangeAddressV1(context.Context, *ChangeAddressRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAddressV1 not implemented")
}
func (UnimplementedAuthV1Server) CheckTokenInMetadataV1(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTokenInMetadataV1 not implemented")
}
func (UnimplementedAuthV1Server) CheckIfUserIsAdminV1(context.Context, *CheckIfUserIsAdminRequestV1) (*CheckIfUserIsAdminResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIfUserIsAdminV1 not implemented")
}
func (UnimplementedAuthV1Server) GetEmailFromTokenInMetadataV1(context.Context, *emptypb.Empty) (*GetEmailFromTokenInMetadataResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailFromTokenInMetadataV1 not implemented")
}
func (UnimplementedAuthV1Server) GetAddressV1(context.Context, *GetAddressRequestV1) (*GetAddressResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressV1 not implemented")
}
func (UnimplementedAuthV1Server) mustEmbedUnimplementedAuthV1Server() {}

// UnsafeAuthV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthV1Server will
// result in compilation errors.
type UnsafeAuthV1Server interface {
	mustEmbedUnimplementedAuthV1Server()
}

func RegisterAuthV1Server(s grpc.ServiceRegistrar, srv AuthV1Server) {
	s.RegisterService(&AuthV1_ServiceDesc, srv)
}

func _AuthV1_RegisterV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).RegisterV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.auth.v1.AuthV1/RegisterV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).RegisterV1(ctx, req.(*RegisterRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_LoginV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).LoginV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.auth.v1.AuthV1/LoginV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).LoginV1(ctx, req.(*LoginRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_ChangePasswordV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).ChangePasswordV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.auth.v1.AuthV1/ChangePasswordV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).ChangePasswordV1(ctx, req.(*ChangePasswordRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_LoginWithOTPV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWithOTPRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).LoginWithOTPV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.auth.v1.AuthV1/LoginWithOTPV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).LoginWithOTPV1(ctx, req.(*LoginWithOTPRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_ChangeAddressV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAddressRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).ChangeAddressV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.auth.v1.AuthV1/ChangeAddressV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).ChangeAddressV1(ctx, req.(*ChangeAddressRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_CheckTokenInMetadataV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).CheckTokenInMetadataV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.auth.v1.AuthV1/CheckTokenInMetadataV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).CheckTokenInMetadataV1(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_CheckIfUserIsAdminV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIfUserIsAdminRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).CheckIfUserIsAdminV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.auth.v1.AuthV1/CheckIfUserIsAdminV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).CheckIfUserIsAdminV1(ctx, req.(*CheckIfUserIsAdminRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_GetEmailFromTokenInMetadataV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).GetEmailFromTokenInMetadataV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.auth.v1.AuthV1/GetEmailFromTokenInMetadataV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).GetEmailFromTokenInMetadataV1(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthV1_GetAddressV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthV1Server).GetAddressV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.auth.v1.AuthV1/GetAddressV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthV1Server).GetAddressV1(ctx, req.(*GetAddressRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthV1_ServiceDesc is the grpc.ServiceDesc for AuthV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.auth.v1.AuthV1",
	HandlerType: (*AuthV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterV1",
			Handler:    _AuthV1_RegisterV1_Handler,
		},
		{
			MethodName: "LoginV1",
			Handler:    _AuthV1_LoginV1_Handler,
		},
		{
			MethodName: "ChangePasswordV1",
			Handler:    _AuthV1_ChangePasswordV1_Handler,
		},
		{
			MethodName: "LoginWithOTPV1",
			Handler:    _AuthV1_LoginWithOTPV1_Handler,
		},
		{
			MethodName: "ChangeAddressV1",
			Handler:    _AuthV1_ChangeAddressV1_Handler,
		},
		{
			MethodName: "CheckTokenInMetadataV1",
			Handler:    _AuthV1_CheckTokenInMetadataV1_Handler,
		},
		{
			MethodName: "CheckIfUserIsAdminV1",
			Handler:    _AuthV1_CheckIfUserIsAdminV1_Handler,
		},
		{
			MethodName: "GetEmailFromTokenInMetadataV1",
			Handler:    _AuthV1_GetEmailFromTokenInMetadataV1_Handler,
		},
		{
			MethodName: "GetAddressV1",
			Handler:    _AuthV1_GetAddressV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
